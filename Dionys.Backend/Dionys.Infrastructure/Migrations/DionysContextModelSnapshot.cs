// <auto-generated />
using System;
using Dionys.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dionys.Infrastructure.Migrations
{
    [DbContext(typeof(DionysContext))]
    partial class DionysContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Dionys.Infrastructure.Models.ConsumedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ConsumedProducts");
                });

            modelBuilder.Entity("Dionys.Infrastructure.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("Fat")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Protein")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("274684a2-d52b-4fb8-8bad-1f065ba76071"),
                            Calories = 24f,
                            Carbohydrates = 4.5f,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Баклажан как баклажан. На вкус как баклажан, на вид как баклажан. Ничего удивительного.",
                            Fat = 0.1f,
                            Name = "Баклажан",
                            Protein = 1.2f
                        },
                        new
                        {
                            Id = new Guid("274684a2-d52b-4fb8-8bad-1f065ba76072"),
                            Calories = 556f,
                            Carbohydrates = 58f,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Вкусная шоколадка. Жаль, что мало. Хотелось бы ещё. Обязательно надо закупать огромными партиями.",
                            Fat = 34f,
                            Name = "Alpen Gold. Молочный шоколад. Чернично-йогуртовая начинка, 90 г",
                            Protein = 3.9f
                        },
                        new
                        {
                            Id = new Guid("274684a2-d52b-4fb8-8bad-1f065ba76073"),
                            Calories = 160f,
                            Carbohydrates = 0f,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Цыплёнок как циплёнок. На вкус был как цыплёнок...",
                            Fat = 13f,
                            Name = "Сибирские колбасы. Окорочок цыплёнка-бройлера, 260 г",
                            Protein = 10f
                        },
                        new
                        {
                            Id = new Guid("274684a2-d52b-4fb8-8bad-1f065ba76074"),
                            Calories = 510f,
                            Carbohydrates = 66f,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Внешний вид напоминает крекеры. На упаковке написано \"крекеры\". Возможно крекеры.",
                            Fat = 24f,
                            Name = "Яшкино. Французский крекер с кунжутом, 185 г",
                            Protein = 8.5f
                        });
                });

            modelBuilder.Entity("Dionys.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dionys.Infrastructure.Models.ConsumedProduct", b =>
                {
                    b.HasOne("Dionys.Infrastructure.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
